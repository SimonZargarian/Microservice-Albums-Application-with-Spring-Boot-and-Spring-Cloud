# 0 makes a random port number to be generated by the Spring Boot
server.port=0

# Gives a specific id to each instance of a running microservice
eureka.instance.instance-id=${spring.application.name}:${spring.application.instance_id:${randon.value}}

# The name of the application 
spring.application.name=user-ws

# The qualified address which Eureka clients communicate with the Eureka server
eureka.client.serviceUrl.defaultZone = http://user:password@localhost:8010/eureka

spring.devtools.restart.enabled=true

# Show H2 console
spring.h2.console.enabled=true

# Enable connection from other addresses 
spring.h2.console.settings.web-allow-others=true

#spring.datasource.url=jdbc:h2:mem:testdb
spring.data.jpa.repositories.bootstrap-mode=default

# Connection url for the database "netgloo_blog"
spring.datasource.url = jdbc:mysql://localhost:3306/photoapp

# Username and secret
spring.datasource.username = root
spring.datasource.password = password

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto = update

# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect



#IP address for Spring API Gateway
#gateway.ip = 

token.expiration_time=864000000

token.secret = fg4fd5fd4dtgg54d54fd

login.url.path=/users/login

# Sets the value for bootstraping the properties file in the Server 
spring.config.import==optional:configserver:http://localhost:8012

# Connection credentials for RabbitMq server
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest

# URL for Albums Microservice
albums.url = http://ALBUMS-WS/users/%s/albums


# Spring Cloud Sleuth Zipkin configuration

# Zipkin port number
spring.zipkin.base-url=http://localhost:9411

# How information will be sent to Zipkin
spring.zipkin.sender.type=web

# Amount of information to be sent to the Zipkin server, 1 is 100 procent
spring.sleuth.sampler.probability=1

# Configure so that microservice can store log files in a centralized physical file for Logstash, creates this file in the project folder 
logging.file=users-ws.log
