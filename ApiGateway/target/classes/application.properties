# Port number
server.port=8082

# The name of the application 
spring.application.name=api-gateway

# The qualified address which Eureka clients communicate with the Eureka server
eureka.client.serviceUrl.defaultZone = http://user:password@localhost:8010/eureka

# This will make the API Gateway to map and raute HTTP request to microservice, provided the request is sent to  Microservice with it application name
#spring.cloud.gateway.discovery.locator.enabled=true

# Allows the name of the microservice to be lowercased
#spring.cloud.gateway.discovery.locator.lower-case-service-id=true

# Configure customized routing
spring.cloud.gateway.routes[0].id=users-status-check

# Make API Gateway get port number from Eureka Server, lb stands for load balancer 
spring.cloud.gateway.routes[0].uri = lb://users-ws

# Used to match HTTP request using headers or HHTP medhod and then raute the requst to a destination url, predicates are like a if statement, if the condition mathces then the request will be forwarded to the destination uri, in this case uri = lb://users-ws 
spring.cloud.gateway.routes[0].predicates[0]=Path=/users-ws/users/status/check
spring.cloud.gateway.routes[0].predicates[1]=Method=GET

# Header predicate for authorization, if the HTTP request header incluedes the value Bearer and some generic value
spring.cloud.gateway.routes[0].predicates[2]=Header=Authorization, Bearer (.*)

spring.cloud.gateway.routes[0].filters[0]=RemoveRequestHeader=Cookie

# Rewrites Path to a new path, the first value is the external path and the second value is the internal path
spring.cloud.gateway.routes[0].filters[1]=RewritePath=/users-ws/users/status/check, /users/status/check

# Filter for custom filter class, this filte will be executed before the Spring CLoud API Gateway performs routing 
spring.cloud.gateway.routes[0].filters[2]=AuthorizationHeaderFilter


# Configures so that the API Gateway requeries authorization header, if the request does not include a authorization header Spring Cloud API Gateway will not route the request to a destination microservice
token.secret = hgjd4d5dedthhws59hgh6d9sghg3f9edg

# Sets the value for bootstraping the properties file in the Server 
spring.config.import==optional:configserver:http://localhost:8012

# Connection credentials for RabbitMq server
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest

# Enable Actuator endpoints
management.endpoints.web.exposure.include=beans,health,routes,httptrace

# Configure so that microservice can store log files in a centralized physical file for Logstash, creates this file in the project folder 
logging.file=users-ws.log



